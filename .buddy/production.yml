- pipeline: "Build & Deploy to Production"
  trigger_mode: "ON_EVERY_PUSH"
  ref_name: "master"
  ref_type: "BRANCH"
  target_site_url: "$PROJECT_URL"
  fetch_all_refs: true
  trigger_condition: "ALWAYS"
  actions:
  - action: "Execute: webpack build"
    type: "BUILD"
    working_directory: "/buddy/$PROJECT_SHORTNAME"
    docker_image_name: "library/node"
    docker_image_tag: "14"
    execute_commands:
    - "cd buildchain"
    - "npm install"
    - "npm run build"
    volume_mappings:
    - "/:/buddy/$PROJECT_SHORTNAME"
    trigger_condition: "ALWAYS"
    shell: "BASH"
  - action: "Install Composer"
    type: "BUILD"
    working_directory: "/buddy/$PROJECT_SHORTNAME"
    docker_image_name: "library/php"
    docker_image_tag: "7.4"
    execute_commands:
    - "cd cms"
    - "composer install --no-scripts --no-interaction --prefer-dist --optimize-autoloader --ignore-platform-reqs"
    setup_commands:
    - "echo \"memory_limit=-1\" >> /usr/local/etc/php/conf.d/buddy.ini"
    - "apt-get update && apt-get install -y git zip"
    - "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
    - "# php ext gd"
    - "apt-get install -y libfreetype6-dev"
    - "apt-get install -y libjpeg62-turbo-dev"
    - "apt-get install -y libpng-dev"
    - "docker-php-ext-configure gd --with-freetype --with-jpeg"
    - "docker-php-ext-install gd"
    - "# php ext zip"
    - "apt-get install -y zip"
    - "apt-get install -y unzip"
    - "apt-get install -y zlib1g-dev"
    - "apt-get install -y libzip-dev"
    - "docker-php-ext-install zip"
    - "# php ext pdo_mysql"
    - "docker-php-ext-configure pdo_mysql --with-pdo-mysql"
    - "docker-php-ext-install pdo_mysql"
    volume_mappings:
    - "/:/buddy/$PROJECT_SHORTNAME"
    trigger_condition: "ALWAYS"
    shell: "BASH"
  - action: "Rsync files to host"
    type: "RSYNC"
    local_path: "cms/"
    remote_path: "$REMOTE_PROJECT_ROOT/deploy-cache"
    login: "$REMOTE_SSH_USER"
    host: "$REMOTE_SSH_HOST"
    port: "22"
    authentication_mode: "WORKSPACE_KEY"
    archive: true
    delete_extra_files: true
    recursive: true
    compress: true
    deployment_excludes:
    - "/.git/"
    trigger_condition: "ALWAYS"
  - action: "Atomic Deploy"
    type: "SSH_COMMAND"
    working_directory: "$REMOTE_PROJECT_ROOT"
    login: "$REMOTE_SSH_USER"
    host: "$REMOTE_SSH_HOST"
    port: "22"
    authentication_mode: "WORKSPACE_KEY"
    commands:
    - "mkdir -p releases"
    - "if [ -d \"releases/$BUDDY_EXECUTION_REVISION\" ] && [ \"$BUDDY_EXECUTION_REFRESH\" = \"true\" ];"
    - "then"
    - " echo \"Removing: releases/$BUDDY_EXECUTION_REVISION\""
    - " rm -rf releases/$BUDDY_EXECUTION_REVISION;"
    - "fi"
    - "if [ ! -d \"releases/$BUDDY_EXECUTION_REVISION\" ];"
    - "then"
    - " echo \"Creating: releases/$BUDDY_EXECUTION_REVISION\""
    - " cp -dR deploy-cache releases/$BUDDY_EXECUTION_REVISION;"
    - "fi"
    - "if [ -d \"public\" && ! -L \"public\" ];"
    - "then"
    - " echo \"Replacing public folder with symlink\""
    - " rm -rf public;"
    - " ln -s current/web public;"
    - "fi"
    - "echo \"Creating: persistent directories\""
    - "mkdir -p storage"
    - "echo \"Symlinking: persistent files & directories\""
    - "ln -nfs $REMOTE_PROJECT_ROOT/.env $REMOTE_PROJECT_ROOT/releases/$BUDDY_EXECUTION_REVISION"
    - "ln -nfs $REMOTE_PROJECT_ROOT/storage $REMOTE_PROJECT_ROOT/releases/$BUDDY_EXECUTION_REVISION"
    - "echo \"Linking current to revision: $BUDDY_EXECUTION_REVISION\""
    - "rm -f current"
    - "ln -s releases/$BUDDY_EXECUTION_REVISION current"
    - "echo \"Setting permissions\""
    - "chmod -R 0774 current/web/cpresources"
    - "echo \"Removing old releases\""
    - "cd releases && ls -t | tail -n +6 | xargs rm -rf"
    trigger_condition: "ALWAYS"
    run_as_script: true
    shell: "BASH"
  - action: "Prep Craft CMS"
    type: "SSH_COMMAND"
    working_directory: "$REMOTE_PROJECT_ROOT/current"
    login: "$REMOTE_SSH_USER"
    host: "$REMOTE_SSH_HOST"
    port: "22"
    authentication_mode: "WORKSPACE_KEY"
    commands:
    - "echo \"Ensure the craft script is executable\""
    - "chmod a+x craft"
    - "echo \"Backup the database just in case any migrations or Project Config changes have issues\""
    - "./craft backup/db"
    - "echo \"Run pending migrations, sync project config, and clear caches\""
    - "./craft migrate/all"
    - "./craft project-config/apply"
    - "./craft clear-caches/all"
    - "echo \"Done prepping Craft\""
    trigger_condition: "ALWAYS"
    run_as_script: true
    shell: "BASH"
  variables:
  - key: "PROJECT_SHORTNAME"
    value: "REPLACE_ME"
  - key: "PROJECT_URL"
    value: "https://REPLACE_ME"
  - key: "REMOTE_PROJECT_ROOT"
    value: "/home/forge/REPLACE_ME"
  - key: "REMOTE_SSH_HOST"
    value: "REPLACE_ME"
  - key: "REMOTE_SSH_USER"
    value: "forge"
